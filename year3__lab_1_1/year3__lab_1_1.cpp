// Динамические структуры данных. Шаблоны классов
// Задание 1
// Реализовать класс, включая конструктор по умолчанию, конструктор копии,
// операцию присваивания и другие перегруженные операции.
// Варианты заданий
// При решении задач необходимо описать класс, который используется для представления
// элементов динамической структуры данных.
// Работа с используемой динамической структурой данных при тестировании класса
// может быть построена путем ввода данных: a) с клавиатуры; б) из файла.
// Возможны два варианта решения:
// а) динамическая структура данных постоянно хранится в памяти;
// б) динамическая структура данных хранится в файле.
// Вариант 8
// Построить класс для работы с односвязным списком. Элементы списка – слова
// (массив символов). Создать список, содержащий некоторую последовательность слов.
// Заменить в списке каждое вхождение заданного слова другим (также заданным).
#include "lab_files/linked_list.cpp"

int main()
{
  linked_list a;
  a.add_node("qwe qwe");
  a.add_node("qwe");
  a.add_node("qwe 3");
  a.add_node("qwe 4");

  // a.show_all();
  // a.replace_all_words("qwe", "aaaaaaaaaaa");
  // // a.show_all();
  // a.pop();
  // a.show_all();
  // cout << "\nB\n";
  linked_list b;
  b = a;
  b.show_all();
  // linked_list c(a);
  // c.show_all();

  return 0;
}